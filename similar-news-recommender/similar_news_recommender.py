# -*- coding: utf-8 -*-
"""similar_news_recommender.ipynb

Automatically generated by Colaboratory.

# **1. Import Libraries**
"""

# Import required libraries
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

"""# **2. Load and Explore Dataset**"""

# Load the News.csv file into a Pandas DataFrame
df = pd.read_csv('News.csv')

# Read the News.csv file into a Pandas DataFrame
df = pd.read_csv('News.csv')

# Print the first 5 rows of the dataset
print(df.head())

# Get the shape of the dataset (number of rows, number of columns)
print("Shape of dataset: {} rows, {} columns".format(df.shape[0], df.shape[1]))

# Get the column names
print("Column names:\n{}".format(', '.join(df.columns.tolist())))

# Get information about the dataset
print("\nInformation about the dataset:")
print(df.info())

"""# **3. Data Preprocessing**"""

# Check for missing values
missing_values_count = df.isnull().sum()

# Print the number of missing values in each column
print(missing_values_count)

# Drop rows with missing values in the 'text' column
df.dropna(subset=df.columns, how='any', inplace=True)

# Print the first 5 rows of the dataset after removing missing values
print(df.head())

"""# **4. Calculate TF-IDF and Cosine Similarity**"""

# Create a TfidfVectorizer object to calculate the TF-IDF scores for the article titles
vectorizer = TfidfVectorizer(stop_words='english')
title_matrix = vectorizer.fit_transform(df['Title'])

# Calculate the cosine similarity matrix between all pairs of article titles
title_similarity_matrix = cosine_similarity(title_matrix)

"""# **5. Define Article Recommendation Function**"""

# Define a function to recommend articles based on a given article title
def recommend_articles(article_title, num_articles=5):
    # Find the index of the given article title in the DataFrame
    index = df[df['Title'] == article_title].index[0]
    
    # Calculate the cosine similarity scores between the given article and all other articles
    similarity_scores = list(enumerate(title_similarity_matrix[index]))
    
    # Sort the list of similarity scores in descending order
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    
    # Select the top N articles with the highest similarity scores
    top_article_indices = [i[0] for i in similarity_scores[1:num_articles+1]]
    
    # Return the titles of the recommended articles
    return df['Title'].iloc[top_article_indices]

"""# **6. Test Article Recommendation Function**"""

recommended_articles = recommend_articles('50 Worst Habits For Belly Fat')
print(recommended_articles)