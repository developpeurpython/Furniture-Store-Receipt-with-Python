# -*- coding: utf-8 -*-
"""superstore_sales_analysis.ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import plotly.colors as colors

# Set the default template for all the plots
pio.templates.default = "plotly_white"

# Load the CSV file into a DataFrame
df = pd.read_csv('superstore.csv', encoding='unicode_escape')

# Print the first few rows of the DataFrame
print("The first few rows of the DataFrame are:")
print(df.head())

# Print the descriptive statistics of the DataFrame
print("The descriptive statistics of the DataFrame are:")
print(df.describe())

# Check for missing values in the DataFrame
if df.isnull().values.any():
    print("The DataFrame contains missing values.")
else:
    print("The DataFrame does not contain any missing values.")

# Convert Order Date and Ship Date to datetime objects
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])

# Extract the month, year, and day of week from the Order Date
df['Order Month'] = df['Order Date'].dt.month 
df['Order Year'] = df['Order Date'].dt.year
df['Order Day of Week'] = df['Order Date'].dt.dayofweek

# Define a function to generate bar charts for sales and profit by category and subcategory
def generate_bar_chart(dataframe, x_col, y_col, title):
    fig = px.bar(dataframe, x=x_col, y=y_col, title=title)
    fig.show()

# Calculate the total sales and profits for each category
sales_by_category = df.groupby('Category')['Sales'].sum()
profit_by_category = df.groupby('Category')['Profit'].sum()

# Generate bar charts for sales and profit by category
generate_bar_chart(sales_by_category.reset_index(), 'Category', 'Sales', 'Total Sales by Category')
generate_bar_chart(profit_by_category.reset_index(), 'Category', 'Profit', 'Total Profits by Category')

# Calculate the total sales and profits for each subcategory
sales_by_subcategory = df.groupby('Sub-Category')['Sales'].sum()
profit_by_subcategory = df.groupby('Sub-Category')['Profit'].sum()

# Generate bar charts for sales and profit by subcategory
generate_bar_chart(sales_by_subcategory.reset_index(), 'Sub-Category', 'Sales', 'Sales Analysis by Sub-Category')
generate_bar_chart(profit_by_subcategory.reset_index(), 'Sub-Category', 'Profit', 'Profit Analysis by Sub-Category')

# Define a function to generate pie charts for sales and profit by category
def generate_pie_chart(dataframe, values_col, names_col, title):
    fig = px.pie(dataframe, values=values_col, names=names_col, hole=0.5, color_discrete_sequence=px.colors.qualitative.Pastel)
    fig.update_traces(textposition='inside', textinfo='percent+label')
    fig.update_layout(title_text=title, title_font=dict(size=24))
    fig.show()

# Calculate the total sales and profits for each category
sales_by_category = df.groupby('Category')['Sales'].sum()
profit_by_category = df.groupby('Category')['Profit'].sum()

# Generate pie charts for sales and profit by category
generate_pie_chart(sales_by_category.reset_index(), 'Sales', 'Category', 'Sales Analysis by Category')
generate_pie_chart(profit_by_category.reset_index(), 'Profit', 'Category', 'Profit Analysis by Category')

# Define a function to generate scatter plots for sales and profit by category
def generate_scatter_plot(dataframe, x_col, y_col, color_col, title):
    fig = px.scatter(dataframe, x=x_col, y=y_col, color=color_col, title=title)
    fig.show()

# Generate scatter plots for sales and profit by category
generate_scatter_plot(df, 'Sales', 'Profit', 'Category', 'Sales vs. Profit by Category')

# Define a function to generate line plots for sales trend over time
def generate_line_plot(dataframe, x_col, y_col, title):
    fig = px.line(dataframe, x=x_col, y=y_col, title=title)
    fig.show()

# Calculate the total sales by month
monthly_sales = df.groupby(pd.Grouper(key='Order Date', freq='M'))['Sales'].sum()

# Generate a line plot for the sales trend over time
generate_line_plot(monthly_sales.reset_index(), 'Order Date', 'Sales', 'Monthly Sales Trend')