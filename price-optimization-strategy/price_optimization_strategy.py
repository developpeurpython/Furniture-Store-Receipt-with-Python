# -*- coding: utf-8 -*-
"""price_optimization_strategy.ipynb

Automatically generated by Colaboratory.

# **1. Importing Libraries and Reading the Dataset**
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error

# Read the dataset
data = pd.read_csv('retail_price.csv')
print(data.head())

"""# **2. Checking for Missing Values and Dataset Statistics**"""

# Check for missing values
print(data.isnull().sum())

# Get dataset statistics
print(data.describe())

"""# **3. Creating Visualizations**"""

# Compute the correlation matrix for numerical columns only
numeric_columns = data.select_dtypes(include='number').columns
corr_matrix = data[numeric_columns].corr()

# Create a heatmap of the correlation matrix
fig = px.imshow(corr_matrix)
fig.update_layout(title='Correlation Matrix')
fig.show()

# Plot the distribution of the target variable
fig = px.histogram(data, x='total_price', nbins=30, title='Distribution of Total Price')
fig.show()

# Create a scatter plot matrix
fig = px.scatter_matrix(data, dimensions=['qty', 'unit_price', 'comp_1', 'product_score', 'total_price'])
fig.update_layout(title='Scatter Plot Matrix')
fig.show()

# Create box plots of total_price across different categories
fig = px.box(data, x='product_category_name', y='total_price', title='Total Price across Product Categories')
fig.show()

"""# **4. Training and Evaluating the Model, Visualizing Predictions**"""

# Split the dataset into features (X) and target variable (y)
X = data[['qty', 'unit_price', 'comp_1', 'product_score']]
y = data['total_price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a decision tree regression model
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Visualize predicted vs. actual retail prices
fig = go.Figure()
fig.add_trace(go.Scatter(x=y_test, y=y_pred, mode='markers', marker=dict(color='blue'), name='Predicted vs. Actual Retail Price'))
fig.add_trace(go.Scatter(x=[min(y_test), max(y_test)], y=[min(y_test), max(y_test)], mode='lines', marker=dict(color='red'), name='Ideal Prediction'))
fig.update_layout(
    title='Predicted vs. Actual Retail Price',
    xaxis_title='Actual Retail Price',
    yaxis_title='Predicted Retail Price'
)
fig.show()