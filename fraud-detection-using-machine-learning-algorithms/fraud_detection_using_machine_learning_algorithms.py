# -*- coding: utf-8 -*-
"""fraud_detection_using_machine_learning_algorithms

Automatically generated by Colaboratory.

# **1. Installation and Import of Libraries**
"""

!pip install pandas
!pip install numpy
!pip install plotly
!pip install scikit-learn

import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

"""# **2. Data Preparation**"""

# Read data from csv file
data = pd.read_csv("synthetic_financial_datasets_for_fraud_detection.csv")

# Display first five rows of data
print(data.head())

# Display the number of rows in the dataset
print("Number of rows in the dataset:", len(data))

# Check for missing values in the data
print(data.isnull().sum())

# Remove rows with missing values
data = data.dropna()

# Explore transaction types
print(data.type.value_counts())

# Convert transaction types to numerical values
# and visualize the distribution of transaction types
type = data["type"].value_counts()
transactions = type.index
quantity = type.values
figure = px.pie(data, values=quantity, names=transactions,hole=0.5, title="Transaction Type")
figure.show()
data["type"] = data["type"].map({"CASH_OUT": 1, "PAYMENT": 2, "CASH_IN": 3, "TRANSFER": 4, "DEBIT": 5})

# Convert "isFraud" values to strings
data["isFraud"] = data["isFraud"].map({0: "No Fraud", 1: "Fraud"})

# Split data into training and testing sets
x = np.array(data[["type", "amount", "oldbalanceOrg", "newbalanceOrig"]])
y = np.array(data[["isFraud"]])
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.10, random_state=42)

"""# **3. Training and Evaluation**"""

# Train a decision tree classifier on the training data
model = DecisionTreeClassifier()
model.fit(xtrain, ytrain)

# Evaluate the model's accuracy on the testing data
print(model.score(xtest, ytest))

"""# **4. Making a Prediction**"""

# Make a prediction for a new transaction
# The features of the new transaction are stored in a NumPy array
# The array contains four values representing the transaction type, amount, old balance, and new balance
# Type of transaction: 4 (TRANSFER) (1 = CASH_OUT, 2 = PAYMENT, 3 = CASH_IN, 4 = TRANSFER, 5 = DEBIT)
# Transaction amount: 5000
# Sender's old account balance: 5000
# Sender's new account balance: 0.0
new_transaction = np.array([[4, 5000, 5000, 0.0]])

# Use the model to make a prediction for the new transaction
prediction = model.predict(new_transaction)

# Print the prediction for the new transaction
if prediction == 0:
    print("Prediction for the new transaction: No Fraud")
else:
    print("Prediction for the new transaction: Fraud")