# -*- coding: utf-8 -*-
"""furniture_store_receipt.ipynb

Automatically generated by Colaboratory.

# **1. Data Setup**
"""

# Define the inventory of items available for purchase.
# Each item is a dictionary with a description and a price.

inventory = {
    "Lovely Loveseat": {
        "description": "Tufted polyester blend on wood.",
        "price": 254.00
    },
    "Stylish Settee": {
        "description": "Faux leather on birch.",
        "price": 180.50
    },
    "Luxurious Lamp": {
        "description": "Glass and iron. 36 inches tall. Brown with cream shade.",
        "price": 52.15
    }
}

# Define the sales tax rate as a decimal.

sales_tax_rate = 0.088

"""# **2. Customer Purchase and Billing**"""

# Define the customer's purchases as a list of item names.

customer_purchases = ["Lovely Loveseat", "Luxurious Lamp"]

# Initialize the customer's itemization and total as empty strings.

customer_itemization = ""
customer_subtotal = 0

# Iterate over the customer's purchases and update the itemization and subtotal.
# For each item, add its name, description, and price to the itemization string,
# and add its price to the subtotal.

for item in customer_purchases:
    # Add the item, description, and price to the customer's itemization.
    item_price = inventory[item]['price']
    customer_itemization += f"| {item:25} | ${item_price:>7.2f} |\n"
    customer_itemization += f"| {' ' * 3}{inventory[item]['description']:45} |\n"
    # Add the item's price to the customer's subtotal.
    customer_subtotal += item_price

# Calculate the sales tax on the customer's subtotal.

sales_tax = round(customer_subtotal * sales_tax_rate, 2)

# Add the sales tax to the customer's subtotal to get the final price.

customer_total = customer_subtotal + sales_tax

# Print the customer's receipt, including the itemization, subtotal, sales tax, and total.

print("=" * 45)
print("     FURNITURE STORE")
print("=" * 45 + "\n")
print(f"{'Item':25}   {'Price':>10}")
print("-" * 45)
print(customer_itemization)
print("-" * 45)
print(f"{'Subtotal:':<25}   ${customer_subtotal:>7.2f}")
print(f"{'Sales Tax @8.8%:':<25}   ${sales_tax:>7.2f}")
print(f"{'Total:':<25}   ${customer_total:>7.2f}")
print("=" * 45)
print("     THANK YOU FOR SHOPPING WITH US!")
print("=" * 45 + "\n")

"""# **3. Data Visualization**"""

!pip install matplotlib

import matplotlib.pyplot as plt

# Define the inventory of items available for purchase.
# Each item is a dictionary with a description and a price.

inventory = {
    "Lovely Loveseat": {
        "description": "Tufted polyester blend on wood.",
        "price": 254.00
    },
    "Stylish Settee": {
        "description": "Faux leather on birch.",
        "price": 180.50
    },
    "Luxurious Lamp": {
        "description": "Glass and iron. 36 inches tall. Brown with cream shade.",
        "price": 52.15
    }
}

# Create a bar chart to visualize the sales for each item.

item_names = list(inventory.keys())
item_prices = [inventory[item]['price'] for item in item_names]

fig, ax = plt.subplots(figsize=(8, 6))
ax.bar(item_names, item_prices, color=['#8E44AD', '#3498DB', '#2ECC71'])
ax.set_title('Sales by Item', fontsize=18)
ax.set_xlabel('Item', fontsize=14)
ax.set_ylabel('Sales ($)', fontsize=14)
ax.tick_params(axis='x', labelsize=12)
ax.tick_params(axis='y', labelsize=12)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_linewidth(0.5)
ax.spines['bottom'].set_linewidth(0.5)
ax.set_axisbelow(True)
ax.grid(axis='y', linestyle='--', alpha=0.7)

# Add labels to the bars.

for i, v in enumerate(item_prices):
    ax.text(i, v + 5, "${:.2f}".format(v), ha='center', fontsize=12)

# Add a caption to the chart.

ax.text(-0.5, -80, "Sales by Item: Lovely Loveseat is the best-selling item", fontsize=12, fontstyle='italic', 
        bbox=dict(facecolor='white', edgecolor='none', alpha=0.5))

# Show the chart.

plt.show()