# -*- coding: utf-8 -*-
"""profit_prediction_with_linear_regression.ipynb

Automatically generated by Colaboratory.

# **1. Import Libraries**
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""# **2. Load and Preview Data**"""

# Read data from URL
url = 'https://raw.githubusercontent.com/amankharwal/Website-data/master/Startups.csv'
data = pd.read_csv(url)

# Print first 5 rows of data
print(data.head())

# Get summary statistics for numerical columns
description = data.describe()
print(f"\nSummary Statistics:\n{description}\n")

"""# **3. Visualize Correlations using Heatmap**"""

# Visualize correlation between columns using heatmap
sns.set(font_scale=1.2)
sns.heatmap(data.corr(numeric_only=True), cmap='coolwarm', annot=True, annot_kws={"fontsize":10}, vmin=-1, vmax=1, cbar_kws={'orientation': 'vertical', 'shrink': 0.8, 'label': 'Correlation Coefficient', 'ticks': [-1, -0.5, 0, 0.5, 1], 'extend': 'both'})

# Add title to plot
plt.title('Correlation Heatmap of Startup Data', fontsize=14)

plt.show()

"""# **4. Prepare Data for Model Training**"""

# Prepare data for training
x = data[["R&D Spend", "Administration", "Marketing Spend"]]
y = data["Profit"]

# Convert x and y to NumPy arrays
x = x.to_numpy()
y = y.to_numpy()

# Reshape y to have a single column
y = y.reshape(-1, 1)

# Split data into training and testing sets
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

"""# **5. Train the Linear Regression Model and Predict Profits**"""

# Train the model
model = LinearRegression()
model.fit(xtrain, ytrain)

# Predict profits for the test data
ypred = model.predict(xtest)

"""# **6. Display Predicted Profits**"""

# Combine actual and predicted profit values into a DataFrame
results = pd.DataFrame({"Actual Profit": ytest.flatten(), "Predicted Profit": ypred.flatten()})

# Calculate the difference between actual and predicted profit values
results["Difference"] = results["Actual Profit"] - results["Predicted Profit"]

# Display the first 5 rows of the results DataFrame
print(results.head())

# Get feature values for the test data
test_data_indices = [data.index[data["Profit"] == value].tolist()[0] for value in ytest.flatten()]
test_data_features = data.loc[test_data_indices, ["R&D Spend", "Administration", "Marketing Spend"]]

# Combine feature values, actual profit, and predicted profit values into a DataFrame
results = pd.DataFrame({"R&D Spend": test_data_features["R&D Spend"].values,
                        "Administration": test_data_features["Administration"].values,
                        "Marketing Spend": test_data_features["Marketing Spend"].values,
                        "Actual Profit": ytest.flatten(),
                        "Predicted Profit": ypred.flatten()})

# Calculate the difference between actual and predicted profit values
results["Difference"] = results["Actual Profit"] - results["Predicted Profit"]

# Format numbers to have thousands separators and round to two decimal places
for column in results.columns:
    if results[column].dtype in ['float64', 'int64']:
        results[column] = results[column].apply(lambda x: f"{x:,.2f}")

# Reset the index to start from 1
results.index += 1

# Display the first 5 rows of the results DataFrame
print("Comparison of Actual Profit and Predicted Profit for Startup Companies:\n")
print(results.head())