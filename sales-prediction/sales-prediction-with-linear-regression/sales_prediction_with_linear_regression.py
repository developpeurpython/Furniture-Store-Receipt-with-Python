# -*- coding: utf-8 -*-
"""sales_prediction_with_linear_regression.ipynb

Automatically generated by Colaboratory.

# **1. Installing and Importing Necessary Libraries**
"""

# Installing necessary libraries
!pip install pandas
!pip install numpy
!pip install plotly
!pip install scikit-learn

# Importing libraries
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""# **2. Data Exploration and Visualization**"""

# Load data from a CSV file
data_url = "https://raw.githubusercontent.com/amankharwal/Website-data/master/advertising.csv"
data = pd.read_csv(data_url)

# Display the first 5 rows of the dataframe
data.head()

# Check for missing values
data.isnull().sum()

# Display scatter plots for each advertising type
sales_col = "Sales"
ad_types = ["TV", "Newspaper", "Radio"]
for ad_type in ad_types:
    fig = px.scatter(data_frame=data, x=sales_col, y=ad_type, size=ad_type, trendline="ols")
    fig.update_layout(title_text="Scatter Plot of Sales vs {}".format(ad_type))
    fig.show()

"""# **3. Data Preparation and Modeling**"""

# Compute correlations between each variable and sales
correlations = data.corr()
correlations[sales_col].sort_values(ascending=False)

# Prepare data for training the linear regression model
feature_cols = ad_types
X = np.array(data[feature_cols])
y = np.array(data[sales_col])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate model performance on the test set
score = model.score(X_test, y_test)
score

"""# **4. Prediction**"""

# Predict sales for new data
new_features = np.array([[230.1, 37.8, 69.2]])
predicted_sales = model.predict(new_features)

# Display predicted sales
print("The predicted sales for the given features are: {:.2f} units.".format(predicted_sales[0]))

# Predict sales for new data
new_features = np.array([[230.1, 37.8, 69.2]])
predicted_sales = model.predict(new_features)

# Display predicted sales with a detailed description
tv_ad_spend = new_features[0][0]
newspaper_ad_spend = new_features[0][1]
radio_ad_spend = new_features[0][2]

print("Given the advertising spending on different channels:")
print("TV: ${:.2f}".format(tv_ad_spend))
print("Newspaper: ${:.2f}".format(newspaper_ad_spend))
print("Radio: ${:.2f}".format(radio_ad_spend))
print("\nThe predicted sales for this advertising mix are: {:.2f} units.".format(predicted_sales[0]))